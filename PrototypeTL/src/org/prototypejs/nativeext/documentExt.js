/*******************************************************************************
 * Copyright (c) 2012 eBay Inc. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     eBay Inc. - initial API and implementation
 *******************************************************************************/
/** section: DOM
   *  document
   *
   *  Prototype extends the built-in `document` object with several convenience
   *  methods related to events.
  **/
vjo.mtype('org.prototypejs.nativeext.documentExt') //< public
//> needs(org.prototypejs.nativeext.document_viewport)
.props({
	
	/**
	 *  document.viewport
	 *
	 *  The `document.viewport` namespace contains methods that return information
	 *  about the viewport &mdash; the rectangle that represents the portion of a web
	 *  page within view. In other words, it's the browser window minus all chrome.
	**/
	viewport: null,	//< public type::document_viewport
	
	/**
     *  document.loaded -> boolean
     *
     *  Whether the full DOM tree is ready for manipulation.
    **/
	//> public boolean
	loaded: null,
	
	/**
     *  document.fire(eventName[, memo[, bubble = true]]) -> Event
     *  - memo (?): Metadata for the event. Will be accessible through the
     *    event's `memo` property.
     *  - bubble (Boolean): Whether the event will bubble.
     *
     *  Fires a custom event of name `eventName` with `document` as the target.
     *
     *  `document.fire` is the document-wide version of [[Element.fire]].
     *
     *  Custom events must include a colon (`:`) in their names.
    **/
	//> public void fire(String eventName, Object? memo, boolean? bubble)
	fire: vjo.NEEDS_IMPL,
	
	/**
     *  document.observe(eventName, handler) -> Element
     *
     *  Listens for the given event over the entire document. Can also be used
     *  for listening to `"dom:loaded"` event.
     *  
     *  [[document.observe]] is the document-wide version of [[Element#observe]].
     *  Using [[document.observe]] is equivalent to
     *  `Event.observe(document, eventName, handler)`.
     *  
     *  ##### The `"dom:loaded"` event
     *  
     *  One really useful event generated by Prototype that you might want to
     *  observe on the document is `"dom:loaded"`. On supporting browsers it
     *  fires on `DOMContentLoaded` and on unsupporting browsers it simulates it
     *  using smart workarounds. If you used `window.onload` before you might
     *  want to switch to `dom:loaded` because it will fire immediately after
     *  the HTML document is fully loaded, but _before_ images on the page are
     *  fully loaded. The `load` event on `window` only fires after all page
     *  images are loaded, making it unsuitable for some initialization purposes
     *  like hiding page elements (so they can be shown later).
     *  
     *  ##### Example
     *  
     *      document.observe("dom:loaded", function() {
     *        // initially hide all containers for tab content
     *        $$('div.tabcontent').invoke('hide');
     *      });
    **/
	//> public Element observe(String eventName, Function handler)
	observe: vjo.NEEDS_IMPL,
	
	/**
     *  document.stopObserving([eventName[, handler]]) -> Element
     *
     *  Unregisters an event handler from the document.
     *  
     *  [[document.stopObserving]] is the document-wide version of
     *  [[Element.stopObserving]].
    **/
	//> public Element stopObserving(String eventName, Function... handler)
	stopObserving: vjo.NEEDS_IMPL,
	
	/**
     *  Element.on(@element, eventName[, selector], callback) -> Event.Handler
     *  
     *  See [[Event.on]].
    **/
	//> public Event.Handler on(Object element, String eventName, Function callback)
	//> public Event.Handler on(Object element, String eventName, Object selector, Function callback)
	on: vjo.NEEDS_IMPL
})
.protos({
	
})
.options({
	metatype: true
})
.endType();